name: p_tuning_squad_t5

trainer:
  devices: 1
  accelerator: gpu
  num_nodes: 1
  precision: 32
  logger: False 
  enable_checkpointing: False
  replace_sampler_ddp: False
  max_epochs: -1
  max_steps: 1000000
  log_every_n_steps: 10
  val_check_interval: null
  check_val_every_n_epoch: 1
  gradient_clip_val: 1.0
  resume_from_checkpoint: null

exp_manager:
  explicit_log_dir: null
  exp_dir: null
  name: ${name}
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: PromptLearning-T5
    name: ${name}
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 2
    mode: min
    save_nemo_on_train_end: False # Should be false, correct prompt learning model file is saved at model.nemo_path set below
    filename: "megatron_t5_prompt_tune--{${exp_manager.checkpoint_callback_params.monitor}:.3f}-{step}"
    model_parallel_size: ${model.tensor_model_parallel_size}
    save_best_model: True
  create_early_stopping_callback: False
  early_stopping_callback_params:
    monitor: "val_loss"
    mode: "min"
    min_delta: 0.001
    patience: 10
    verbose: True

model:
  seed: 1234
  nemo_path: ${name}.nemo # .nemo filename/absolute path to where the virtual prompt model parameters will be saved
  virtual_prompt_style: "p-tuning" # one of 'prompt-tuning', 'p-tuning', or 'inference'
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1 
  global_batch_size: 2 
  micro_batch_size: 2 # micro batch size should equal global batch size when pipeline parallel = 1
  validation_global_batch_size: ${model.global_batch_size}
  validation_micro_batch_size: ${model.micro_batch_size}
  validation_drop_last: False
  report_validation_metric: False
  validation_metric: accuracy
  num_speech_tokens: 10112 # Vocabulary size pertaining to speech
  seq_pattern: "delay_parallel" # parallel, delay_parallel, flatten
  speech_head_type: "linear" # token_level, linear
  cross_entropy_type: "vocab_parallel" # regular, vocab_parallel
  attn_prior_scaledown_start_step: 10000
  attn_prior_end_step: 11000
  return_all_crossattention_probs: True
  num_cross_attention_heads: 12 # 12 for 220m, 16 for 3b.
  restore_path: null # Path to an existing p-tuned/prompt tuned .nemo model you wish to add new tasks to or run inference with
  language_model_path: ??? # Path to the pretrained T5 language model .nemo file, always required
  save_nemo_on_validation_end: True # Saves an inference ready .nemo file every time a checkpoint is saved during training. 
  existing_tasks: []
  new_tasks: ["squad"] 


  task_templates: 
  - taskname: "squad" # Ignore this task, just kept for some backward compatibility
    prompt_template: "<|VIRTUAL_PROMPT_0|> {context} {question} {answer}" 
    total_virtual_tokens: 3
    virtual_token_splits: [3] 
    truncate_field: context
    answer_field: answer
    truncation_keys: "context"
    audio_keys: "context"
    answer_key: "answer"

  - taskname: "asr"
    prompt_template: "Context: {audio_codes} Question: {question} Answer: {text}"
    truncation_keys: "audio_codes"
    audio_keys: "audio_codes"
    answer_key: "text"

  - taskname: "target_speaker_asr"
    prompt_template: "Context: {audio_codes} SpeakerPrompt: {speaker_prompt} Question: {question} Answer: {text}"
    truncation_keys: "audio_codes"
    audio_keys: "audio_codes,speaker_prompt"
    answer_key: "text"

  - taskname: "speaker_verification"
    prompt_template: "Context: AudioSample_1: {audio_codes1} AudioSample_2: {audio_codes2} Question: {question} Answer: {answer}"
    truncation_keys: "audio_codes1"
    audio_keys: "audio_codes1,audio_codes2"
    answer_key: "answer"

  - taskname: "speaker_attributed_asr"
    prompt_template: "Context: {audio_codes1}{audio_codes2} Speaker1_Name: {speaker1_id} Speaker1_Prompt: {speaker1_prompt} Speaker2_Name: {speaker2_id} Speaker2_Prompt: {speaker2_prompt} Question: {question} Answer: {answer}"
    truncation_keys: "audio_codes1,audio_codes2"
    audio_keys: "audio_codes1,audio_codes2,speaker1_prompt,speaker2_prompt"
    answer_key: "answer"

  - taskname: "translation"
    prompt_template: "Context: {context} Question: {question} Answer: {answer}"
    truncation_keys: "context"
    audio_keys: null
    answer_key: "answer"

  p_tuning: # P-tuning specific params
      encoder_type: "mlp" # Either "mlp" or "lstm", mlp is default
      num_layers: 2 # 2 recommended for MLP, 1 recommended for LSTM, must be at least 2 for mlp
      dropout: 0.0

  prompt_tuning: # Prompt tunin specific params
    new_prompt_init_methods: ['text'] # List of 'text' or 'random', should correspond to tasks listed in new tasks
    new_prompt_init_text: ['some init text goes here'] # some init text if init method is text, or None if init method is random

  data:
    train_ds_recog_multitask: ["/data/LibriSpeech/dev_filtered.json"]
    validation_ds_recog_multitask: ["/data/LibriSpeech/dev_filtered.json"]
    
    sample_rate: 24000
    
    
    use_attention_prior: false
    attention_prior_scaling_factor: 0.05
    cross_attention_epsilon: 0.0
    decoder_starts_with_pad: False
    add_eos_to_decoder_output: True
    add_sentinel_to_input: True
    ul2_prompt_token: null # <extra_id_s>, <extra_id_r>, <extra_id_x>
    
    
    
    speech_offset: 30000
    train_task: asr
    sup_data_path: null

    shuffle: True
    num_workers: 4
    memmap_workers: null
    pin_memory: True
    max_seq_length: 2048
    min_seq_length: 1
    drop_last: True
    # Example of how to specify concat_sampling_probabilities
    # concat_sampling_probabilities:
    #   - 0.5
    #   - 0.25
    #   - 0.25
    concat_sampling_probabilities: null # When providing a list of datasets, this arg defines the sampling probabilities from each dataset when strategy='random'
    label_key: 'text'
    add_eos: True
    add_sep: False
    add_bos: False
    truncation_field: "audio_codes1" # Can be multiple keys separated with ',' Options: keys in prompt_template
    index_mapping_dir: null # Path to a directory to write index mapping files.
    # prompt_template: "Context: {audio_codes} Question: [ Transcribe in English ] Answer: {text}"  # fstring to use for assistant prompt. Example: "Q: {input}\nA: {output}"
    # prompt_template: "Context: {audio_codes} SpeakerPrompt: {speaker_prompt} Question: {question} Answer: {text}"  # fstring to use for assistant prompt. Example: "Q: {input}\nA: {output}"
    # prompt_template: "Context: AudioSample_1: {audio_codes1} AudioSample_2: {audio_codes2} Question: {question} Answer: {answer}"
    prompt_template: null
    hf_dataset: False # Whether to load the json file with the HuggingFace dataset. otherwise, will load the jsonl file with the JSONLMemMapDataset.
    truncation_method: 'right' # Truncation from which position, Options: ['left', 'right'] 
    # audio related args
    num_audio_codebooks: 8
    audio_codebook_size: 1024
    audio_token_offset: 30000
    pad_audio_to_length: 0
    attn_mask_type: 'causal' # shouldn't be used for T5 type dataset
    # multi-task related args
    task_templates: ${model.task_templates}

  optim:
    name: fused_adam
    lr: 5e-5
    weight_decay: 0.01 
    betas: 
    - 0.9
    - 0.98
    # sched:
    #   name: CosineAnnealing
    #   warmup_steps: 50
    #   constant_steps: 0
    #   min_lr: 0.0
    #   monitor: val_loss
    #   reduce_on_plateau: false